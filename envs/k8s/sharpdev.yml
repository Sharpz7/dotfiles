# https://github.com/Sharpz7/dotfiles/blob/main/envs/k8s/sharpdev.yml

version: 1

# envfile: env/.env

scripts:
  init: |
    echo "*" > ./env/.gitignore
    echo "REPO=https://github.com/kubernetes/kubernetes.git" > ./env/.env
    echo "apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: myapp
      namespace: default
      labels:
        app: myapp
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: myapp
      template:
        metadata:
          labels:
            app: myapp
        spec:
          containers:
            - name: myapp
              image: alpine:latest
              command: ['sh', '-c', 'while true; do echo \"logging\" >> /opt/logs.txt; sleep 1; done']
              volumeMounts:
                - name: data
                  mountPath: /opt
          initContainers:
            - name: logshipper
              image: alpine:latest
              command: ['sh', '-c', 'tail -F /opt/logs.txt']
              volumeMounts:
                - name: data
                  mountPath: /opt
          volumes:
            - name: data
              emptyDir: {}" > ./env/deployment.yaml


  jobtest: |

    # Run the command
    OUTPUT=$(CGO_ENABLED=1 make test WHAT=./pkg/controller/job KUBE_COVER=y | tee /dev/tty)

    # Extract the path of the HTML file from the output
    HTML_PATH=$(echo "$OUTPUT" | grep -o "/tmp/k8s_coverage/.*/combined-coverage.html")

    # Copy the HTML file to the current directory
    cp "$HTML_PATH" ./env

    # Inform the user
    echo "Coverage report copied to $(pwd)/env/combined-coverage.html"

  setup: |
    ./hack/install-etcd.sh
    ./hack/install-protoc.sh
    export PATH="$GOPATH/src/k8s.io/kubernetes/third_party/etcd:${PATH}"
    make WHAT=cmd/kubectl
    sudo apt install net-tools

  fork: |
    ~/script/merge-upstream.sh

  verify: |
    export PATH="/home/coder/go/src/k8s.io/kubernetes/third_party/protoc:${PATH}"
    make verify

  update: |
    make update

  rebase: |
    git rebase upstream/master

  kind: |
    go install sigs.k8s.io/kind@latest
    kind create cluster --name k8s-test

    kind get kubeconfig --name k8s-test > ./env/kind-kubeconfig.yaml

    sharpdev kubectl apply -f ./env/deployment.yaml

  kubectl: |
    kubectl --kubeconfig ./env/kind-kubeconfig.yaml $_ARG1 $_ARG2 $_ARG3 $_ARG4 $_ARG5 $_ARG6 $_ARG7 $_ARG8 $_ARG9

  delete: |
    kind delete cluster --name k8s-test

